#include<bits/stdc++.h>
using namespace std;
struct node{
    int data;
    struct node* left;
    struct node* right;
    node(int val){
        data=val;
        left=NULL;
        right=NULL;
    }
};
int sizee(node *temp){
    if(temp==NULL){
        return 0;
    }
    int lsz=sizee(temp->left);
    int rsz=sizee(temp->right);
    int sz=(lsz+rsz)+1;
    return sz;
    
}
int sum(node *temp){
    if(temp==NULL)
    return 0;
    int ls=sum(temp->left);
    int rs=sum(temp->right);
    int s=(ls+rs)+temp->data;
    return s;
}
int mx(node *temp){
    if(temp==NULL){
        return INT_MIN;
    }
    int lmx=mx(temp->left);
    int rmx=mx(temp->right);
    int max_val=max(max(temp->data,lmx),rmx);
    return max_val;
}
int height(node *temp){
    if(temp==NULL){
        return -1;//in case of edges
        //in case of root return 0;
        
    }
   
    int htl=height(temp->left);
    int htr=height(temp->right);
    int ht=max(htl,htr)+1;
    return ht;
}
int main(){
    struct node *root=new node(50);
    root->left=new node(25);
    root->right=new node(75);
    root->left->left=new node(12);
    root->left->right=new node(37);
    root->left->right->left=new node(30);
    root->right->left=new node(62);
    root->right->right=new node(87);
    root->right->left->right=new node(70);
   // preorder(root);
   cout<<"SIZE : "<<sizee(root)<<endl;
   cout<<"SUM : "<<sum(root)<<endl;
   cout<<"MAXIMUM : "<<mx(root)<<endl;
  cout<<"HEIGHT : "<<height(root)<<endl;
    
    return 0;
    
}



OUTPUTS :
SIZE : 9
SUM : 448
MAXIMUM : 87
HEIGHT : 3
