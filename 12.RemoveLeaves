#include <bits/stdc++.h>
using namespace std;
struct node{
    int data;
    struct node *left;
    struct node *right;
    node(int d){
        this->data=d;
        this->left=NULL;
        this->right=NULL;
    }
};
void preinpost(node *temp){
    stack<pair<node*,int>> s;//{node,state}
    s.push({temp,1});
    string pre="";
    string inord="";
    string post="";
    while(!s.empty()){
        if(s.top().second==1){
            auto t=s.top();
            s.pop();
            pre+=to_string(t.first->data)+" ";
            s.push({t.first,t.second+1});
            if(t.first->left!=NULL)
            s.push({t.first->left,1});
            
        }
        else if(s.top().second==2){
            auto t=s.top();
            s.pop();
            inord+=to_string(t.first->data)+" ";
            s.push({t.first,t.second+1});
            if(t.first->right!=NULL)
            s.push({t.first->right,1});
        }
        else{
            auto t=s.top();
            s.pop();
            post+=to_string(t.first->data)+" ";
        }
    }
    cout<<"Preorder : "<<pre<<endl;
    // cout<<"Inorder : "<<inord<<endl;
    // cout<<"Postorder : "<<post<<endl;
    
}
void onlyonechild(node *temp){
    if(temp==NULL)
    return;
    if(temp->left!=NULL&&temp->right==NULL)
    cout<<temp->data<<endl;
    if(temp->right!=NULL&&temp->left==NULL)
    cout<<temp->data<<endl;
    onlyonechild(temp->left);
    onlyonechild(temp->right);
    
    
}
node* removeleafnodes(node *temp){
    if(temp==NULL)
    return NULL;
    if(temp->left==NULL&&temp->right==NULL)
    return NULL;
    temp->left=removeleafnodes(temp->left);
    temp->right=removeleafnodes(temp->right);
    return temp;
}

int main() {
	// your code goes here
	   struct node *root=new node(50);
    root->left=new node(25);
    root->right=new node(75);
    root->left->left=new node(12);
    root->left->right=new node(37);
    root->left->right->left=new node(30);
    root->right->left=new node(62);
    root->right->right=new node(87);
    root->right->left->right=new node(70);
    //pathtoleaffromroot(root," ",0,10,90);
    preinpost(root);
    node *nroot=removeleafnodes(root);
    preinpost(nroot);
    
	return 0;
}
OUTPUT:

Preorder : 50 25 12 37 30 75 62 70 87 
Preorder : 50 25 37 75 62 
