#include<bits/stdc++.h>
using namespace std;
struct node{
    int data;
    struct node* left;
    struct node* right;
    node(int val){
        data=val;
        left=NULL;
        right=NULL;
    }
};
struct bstpair{
    bool isbst;
    int min_val;
    int max_val;
    int largestbstnode;
    int largestbstsize;
};
bstpair* Isbst(node *temp){
    if(temp==NULL){
        bstpair *bres=new bstpair();
        bres->isbst=true;
        bres->min_val=INT_MAX;
        bres->max_val=INT_MIN;
        bres->largestbstnode=0;
        bres->largestbstsize=0;
        return bres;
    }
    bstpair* lst=Isbst(temp->left);
    bstpair* rst=Isbst(temp->right);
    bstpair* parentnode = new bstpair();
    parentnode->isbst=lst->isbst&&rst->isbst&&(temp->data>=lst->max_val&&temp->data<=rst->min_val);
    parentnode->max_val=max(temp->data,max(lst->max_val,rst->max_val));
    parentnode->min_val=min(temp->data,min(lst->min_val,rst->min_val));
    if(parentnode->isbst){
        parentnode->largestbstnode=temp->data;
        parentnode->largestbstsize=lst->largestbstsize+rst->largestbstsize+1;
        }
    else if(lst->largestbstsize>rst->largestbstsize){
        parentnode->largestbstsize=lst->largestbstsize;
        parentnode->largestbstnode=lst->largestbstnode;
    }
    else{
        parentnode->largestbstnode=rst->largestbstnode;
        parentnode->largestbstsize=rst->largestbstsize;
    }
    return parentnode;
}
int main() {
	// your code goes here
	struct node *root=new node(50,NULL,NULL);
    root->left=new node(25,NULL,NULL);
    root->right=new node(75,NULL,NULL);
    root->left->left=new node(51,NULL,NULL);
    bstpair *ans=Isbst(root);
    cout<<ans->largestbstnode<<"@" <<ans->largestbstsize<<endl;
    
    return 0;
