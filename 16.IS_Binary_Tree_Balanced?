Approach1: Using Travel and change
Approach 2 : Using pair


#include<bits/stdc++.h>
using namespace std;
struct node{
    int data;
    struct node* left;
    struct node* right;
    node(int val){
        data=val;
        left=NULL;
        right=NULL;
    }
};
static bool bbt=true;
int Balanced_Binary_tree(node *temp){               //USING TRAVEL AND CHANGE
    if(temp==NULL)
    return 0;
    int lh=Balanced_Binary_tree(temp->left);
    int rh=Balanced_Binary_tree(temp->right);
    int gap=abs(lh-rh);
    if(gap>1)
    bbt=false;
    int self_height=max(lh,rh)+1;
    return self_height;
}
pair<bool,int> Balanced_Binary_tree_usingpair(node *temp){//USING PAIR
    if(temp==NULL){
        pair<bool,int> bres;
        bres.first=true;
        bres.second=0;
        return bres;
    }
    pair<bool,int> lt=Balanced_Binary_tree_usingpair(temp->left);
    pair<bool,int> rt=Balanced_Binary_tree_usingpair(temp->right);
    pair<bool,int> myres;
    myres.first=abs(lt.second-rt.second)<=1&&lt.first&&rt.first;
    myres.second=max(lt.second,rt.second)+1;
    return myres;
}

int main() {
	  struct node *root=new node(50);
    root->left=new node(25);
    root->right=new node(75);
    root->left->left=new node(12);
    root->left->right=new node(37);
    root->left->right->left=new node(30);
    root->right->left=new node(62);
    root->right->right=new node(87);
    root->right->left->right=new node(70);
    // Balanced_Binary_tree(root);
    // cout<<bbt<<endl;
    pair<bool,int> ans=Balanced_Binary_tree_usingpair(root);
    cout<<ans.first<<endl;
	return 0;
}
