#include <bits/stdc++.h>
using namespace std;
struct node{
    int data;
    struct node *left;
    struct node *right;
    node(int d,struct node *ll,struct node *rr){
        this->data=d;
        this->left=ll;
        this->right=rr;
    }
};
void klevelsdownnodes(node *temp,int k,node *block){
    if(temp==NULL||k<0||temp==block)
    return;
    if(k==0){
        cout<<temp->data<<endl;
    }
    klevelsdownnodes(temp->left,k-1,block);
    klevelsdownnodes(temp->right,k-1,block);
}

void levelorder(node *temp){
    if(temp==NULL)
    return;
    queue<node*> q;
    q.push(temp);
    while(q.size()>0){
        int count=q.size();
        for(int i=0;i<count;i++){
            auto t=q.front();
            q.pop();
        cout<<t->data<<" ";
        if(t->left!=NULL)
        q.push(t->left);
        if(t->right!=NULL)
        q.push(t->right);
        }
        cout<<endl;
    }
}
void preinpost(node *temp){
    stack<pair<node*,int>> s;//{node,state}
    s.push({temp,1});
    string pre="";
    string inord="";
    string post="";
    while(!s.empty()){
        if(s.top().second==1){
            auto t=s.top();
            s.pop();
            pre+=to_string(t.first->data)+" ";
            s.push({t.first,t.second+1});
            if(t.first->left!=NULL)
            s.push({t.first->left,1});
            
        }
        else if(s.top().second==2){
            auto t=s.top();
            s.pop();
            inord+=to_string(t.first->data)+" ";
            s.push({t.first,t.second+1});
            if(t.first->right!=NULL)
            s.push({t.first->right,1});
        }
        else{
            auto t=s.top();
            s.pop();
            post+=to_string(t.first->data)+" ";
        }
    }
    cout<<"Preorder : "<<pre<<endl;
    // cout<<"Inorder : "<<inord<<endl;
    // cout<<"Postorder : "<<post<<endl;
    
}
static vector<node*> v;
bool nodetorootpath(node *temp,int nodeval){
    if(temp==NULL)
    return false;
    if(temp->data==nodeval){
        v.push_back(temp);
        return true;
    }
    bool lc=nodetorootpath(temp->left,nodeval);
    if(lc){
    v.push_back(temp);
    return true;
    }
    bool rc=nodetorootpath(temp->right,nodeval);
    if(rc){
    v.push_back(temp);
    return true;
}
return false;
}
void knodesfar(node *temp1,int nd,int f){
    nodetorootpath(temp1,nd);
    for(int i=0;i<v.size();i++){
        klevelsdownnodes(v[i],f-i,i==0?NULL:v[i-1]);
    }
}
void pathtoleaffromroot(node *temp,string path,int sum,int lo,int hi){
    if(temp==NULL)
    return;
    if(temp->left==NULL&&temp->right==NULL){
        sum+=temp->data;
        path+=to_string(temp->data);
        cout<<path<<endl;
    }
    pathtoleaffromroot(temp->left,path+to_string(temp->data)+" ",sum+temp->data,lo,hi);
    pathtoleaffromroot(temp->right,path+to_string(temp->data)+" ",sum+temp->data,lo,hi);
}
node* transformtolc(node *temp){
    if(temp==NULL)
    return NULL;
    auto lcr=transformtolc(temp->left);
    auto rcr=transformtolc(temp->right);
    node *nn=new node(temp->data,lcr,NULL);
    temp->left=nn;
    temp->right=rcr;
    return temp;
    
}
void preorder(node *temp){
    if(temp==NULL)
    return;
    if(temp->left==NULL&&temp->right==NULL)
    cout<<". <-"<<temp->data<<" .->"<<endl;
    else if(temp->left==NULL)
    cout<<". <-"<<temp->data<<"->"<<temp->right->data<<endl;
    else if(temp->right==NULL)
    cout<<temp->left->data<<"<-"<<temp->data<<" .->"<<endl;
    else
    cout<<temp->left->data<<"<-"<<temp->data<<"->"<<temp->right->data<<endl;
    preorder(temp->left);
    preorder(temp->right);
    
}
int main() {
	// your code goes here
	   struct node *root=new node(50,NULL,NULL);
    root->left=new node(25,NULL,NULL);
    root->right=new node(75,NULL,NULL);
    root->left->left=new node(12,NULL,NULL);
    root->left->right=new node(37,NULL,NULL);
    root->left->right->left=new node(30,NULL,NULL);
    root->right->left=new node(62,NULL,NULL);
    root->right->right=new node(87,NULL,NULL);
    root->right->left->right=new node(70,NULL,NULL);
//   nodetorootpath(root,70);
//   for(int i=0;i<v.size();i++){
//       cout<<v[i]<<endl;
//   }
// knodesfar(root,25,2);
//pathtoleaffromroot(root," ",0,10,90);
node *ttc=transformtolc(root);
preinpost(ttc);


    
	return 0;
}
