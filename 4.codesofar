#include <bits/stdc++.h>
using namespace std;
struct node{
    int data;
    struct node *left;
    struct node *right;
    node(int d){
        this->data=d;
        this->left=NULL;
        this->right=NULL;
    }
};
void preinpost(node *temp){
    stack<pair<node*,int>> s;//{node,state}
    s.push({temp,1});
    string pre="";
    string inord="";
    string post="";
    while(!s.empty()){
        if(s.top().second==1){
            auto t=s.top();
            s.pop();
            pre+=to_string(t.first->data)+" ";
            s.push({t.first,t.second+1});
            if(t.first->left!=NULL)
            s.push({t.first->left,1});
            
        }
        else if(s.top().second==2){
            auto t=s.top();
            s.pop();
            inord+=to_string(t.first->data)+" ";
            s.push({t.first,t.second+1});
            if(t.first->right!=NULL)
            s.push({t.first->right,1});
        }
        else{
            auto t=s.top();
            s.pop();
            post+=to_string(t.first->data)+" ";
        }
    }
    cout<<"Preorder : "<<pre<<endl;
    // cout<<"Inorder : "<<inord<<endl;
    // cout<<"Postorder : "<<post<<endl;
    
}
void onlyonechild(node *temp){
    if(temp==NULL)
    return;
    if(temp->left!=NULL&&temp->right==NULL)
    cout<<temp->data<<endl;
    if(temp->right!=NULL&&temp->left==NULL)
    cout<<temp->data<<endl;
    onlyonechild(temp->left);
    onlyonechild(temp->right);
    
    
}
node* removeleafnodes(node *temp){
    if(temp==NULL)
    return NULL;
    if(temp->left==NULL&&temp->right==NULL)
    return NULL;
    temp->left=removeleafnodes(temp->left);
    temp->right=removeleafnodes(temp->right);
    return temp;
}
int height(node *temp){
    if(temp==NULL){
        return -1;//in case of edges
        //in case of root return 0;
        
    }
   
    int htl=height(temp->left);
    int htr=height(temp->right);
    int ht=max(htl,htr)+1;
    return ht;
}
static int diameter;
int diameterf(node *temp){
    if(temp==NULL)
    return 0;
    int dc=-1;
    int sdc=-1;
    int ldc=diameterf(temp->left);
    int rdc=diameterf(temp->right);
   
    int can=height(temp->left)+height(temp->right)+2;
    diameter=max(can,max(ldc,rdc));
    return max(ldc,rdc)+1;
}
pair<int,int> newdia(node *temp){
    if(temp==NULL)
    {
        pair<int,int> bs;
        bs.first=-1;
        bs.second=0;
        return bs;
    }
    pair<int,int> lp=newdia(temp->left);
    pair<int,int> rp=newdia(temp->right);
     pair<int,int> res;
     res.first=max(lp.first,rp.first)+1;
     int fes=lp.first+rp.first+2;
   res.second=max(fes,max(lp.second,rp.second));
    return res;
}
struct bstpair{
        bool isbst;
        int mn;
        int mx;
};
bstpair* Isbst(node *temp){
    if(temp==NULL){
        bstpair* bres=new bstpair();
        bres->mn=INT_MAX;
        bres->mx=INT_MIN;
        bres->isbst=true;
        return bres;
    }
    bstpair* lst=Isbst(temp->left);
    bstpair* rst=Isbst(temp->right);
    bstpair* mp=new bstpair();
    mp->isbst=lst->isbst&&rst->isbst&&(temp->data>=lst->mx&&temp->data<=rst->mn);
    mp->mn=min(temp->data,min(lst->mn,rst->mn));
    mp->mx=max(temp->data,max(lst->mx,rst->mx));
    return mp;
    
}
static int tilt=0;//trvel and change
int tiltsum(node *temp){
    if(temp==NULL)
    return 0;
    int lts=tiltsum(temp->left);
    int rts=tiltsum(temp->right);
    int local_tilt=abs(lts-rts);
    tilt+=local_tilt;
    int sum=lts+rts+temp->data;
    return sum;
}
static bool balance;
int balancebinarytree(node* temp){
    if(temp==NULL){
        balance=true;
         return 0;
    }
   
    int lbt=balancebinarytree(temp->left);
    int rbt=balancebinarytree(temp->right);
    if(abs(lbt-rbt)>1)
    {
        balance=false;
    }
    int ht=max(lbt,rbt)+1;
    return ht;
}
int main() {
	// your code goes here
	   struct node *root=new node(50);
    root->left=new node(25);
    root->right=new node(75);
    root->left->left=new node(12);
    root->left->right=new node(37);
    root->left->right->left=new node(30);
    root->right->left=new node(62);
    root->right->right=new node(87);
   root->right->left->right=new node(70);
   //root->right->left->right->right=new node(900);
    //pathtoleaffromroot(root," ",0,10,90);
    // preinpost(root);
    // node *nroot=removeleafnodes(root);
    // preinpost(nroot);
    // diameterf(root);
    // cout<<diameter<<endl;
    // pair<int,int> ans=newdia(root);
    // cout<<ans.second<<endl;
    // tiltsum(root);
    // cout<<tilt<<endl;
    // bstpair* ans=Isbst(root);
    // cout<<ans->isbst<<endl;
    balancebinarytree(root);
    cout<<balance<<endl;
    
	return 0;
}
